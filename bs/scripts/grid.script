local m_game = require "bs.lua.game"

local cell_size = 94
local border_x = ((m_game.width - cell_size * 5) / 2) + cell_size / 2
local border_y = ((m_game.height - cell_size * 7) / 2) + cell_size / 2

local function cells_fill(cells, max_level)
	for i = 1, 5 do
		for j = 1, 7 do
			if cells[i][j].block_id == nil then
				local block = {}
				block.pos = vmath.vector3(cell_size * (i - 1) + border_x, cell_size * (j - 1) + border_y, 0)
				block.level = math.random(1, max_level)
				block.id = factory.create("#factory-block", block.pos, nil, {level = block.level})
				if cells[i][j].block_pos ~= nil then
					msg.post(block.id, m_game.fade_in, {duration = m_game.dtn_create})
					msg.post(block.id, m_game.scale_in, {duration = m_game.dtn_create})
				else
					msg.post(block.id, m_game.fade_in, {duration = m_game.dtn_fade})
				end
				cells[i][j] = {col = i, row = j, block_id = block.id, block_pos = block.pos, block_level = block.level}
			end
		end
	end
end

function init(self)
	self.cells = (sys.load(sys.get_save_file(m_game.save_file, "cells"))).cells or nil
	self.level = (sys.load(sys.get_save_file(m_game.save_file, "level"))).level or 2
	if self.cells ~= nil then
		for i = 1, 5 do
			for j = 1, 7 do
				self.cells[i][j].block_pos = vmath.vector3(cell_size * (i - 1) + border_x, cell_size * (j - 1) + border_y, 0)
				self.cells[i][j].block_id = factory.create("#factory-block", self.cells[i][j].block_pos, nil, {level = self.cells[i][j].block_level})
				msg.post(self.cells[i][j].block_id, m_game.fade_in, {duration = m_game.dtn_fade})
			end
		end
	else
		self.cells = {}
		for i = 1, 5 do
			self.cells[i] = {}
			for j = 1, 7 do
				self.cells[i][j] = {}
			end
		end
		cells_fill(self.cells, self.level)
	end
	self.link = {}
	m_game.delay_input_focus(m_game.dtn_create)
end

local function cells_delete(cells)
	for i = 1, 5 do
		for j = 1, 7 do
			if cells[i][j].block_id ~= nil then
				msg.post(cells[i][j].block_id, m_game.fade_out, {duration = m_game.dtn_fade})
				msg.post(cells[i][j].block_id, m_game.delete, {duration = m_game.dtn_fade})
			end
		end
	end
	return nil
end

function on_message(self, message_id, message, sender)
	if message_id == m_game.delete then
		msg.post(".", "release_input_focus")
		self.cells = cells_delete(self.cells)
	elseif message_id == m_game.reset then
		sys.save(sys.get_save_file(m_game.save_file, "cells"), {cells = nil})
		sys.save(sys.get_save_file(m_game.save_file, "level"), {level = 2})
		sys.save(sys.get_save_file(m_game.save_file, "score"), {score = 0})
	end
end

local function link_remove(self)
	for i = 1, #self.link do
		msg.post(self.link[i].block_id, m_game.unlink, {duration = m_game.dtn_create})
		self.cells[self.link[i].col][self.link[i].row].linked = nil
	end
	self.link = {}
end

local function add_to_link(self, pos)
	local col = math.floor((pos.x - (border_x - cell_size / 2)) / cell_size) + 1
	local row = math.floor((pos.y - (border_y - cell_size / 2)) / cell_size) + 1
	if col > 0 and row > 0 and col < 6 and row < 8 then
		local curr = self.cells[col][row]
		if #self.link > 0 then
			if curr.linked ~= nil then
				msg.post(".", "release_input_focus")
				local function cell_clear(cell)
					go.animate(cell.block_id, "position", go.PLAYBACK_ONCE_FORWARD,
					curr.block_pos, go.EASING_LINEAR, m_game.dtn_create)
					msg.post(cell.block_id, m_game.fade_out, {duration = m_game.dtn_create})
					msg.post(cell.block_id, m_game.scale_out, {duration = m_game.dtn_create})
					msg.post(cell.block_id, m_game.delete, {duration = m_game.dtn_create})
					self.cells[cell.col][cell.row].linked = nil
					self.cells[cell.col][cell.row].block_id = nil
				end
				m_game.score = 2 ^ curr.block_level * #self.link + m_game.score
				if curr.block_level < 27 then
					if curr.block_level > self.level then
						self.level = curr.block_level
					end
					curr.block_level = curr.block_level + 1
					msg.post(curr.block_id, m_game.levelup)
					msg.post(curr.block_id, m_game.unlink, {duration = m_game.dtn_create})
					curr.linked = nil
					for i = 1, #self.link do
						if self.link[i].block_id ~= curr.block_id then
							cell_clear(self.link[i])
						end
					end
				else
					for i = 1, #self.link do
						cell_clear(self.link[i])
					end
				end
				self.link = {}
				sound.play("#sound-merge", {gain = m_game.volume})
				timer.delay(m_game.dtn_create, false, function()
					msg.post("game#game", m_game.update_score)
					msg.post("game#game", m_game.set_preview, {preview = 0})
					timer.delay(m_game.dtn_fall, false, function()
						if self.cells ~= nil then
							sound.play("#sound-pop", {gain = m_game.volume})
							cells_fill(self.cells, self.level)
							local function check_over(cells)
								for i = 1, 5 do
									for j = 1, 7 do
										if i > 1 then -- check left
											if cells[i-1][j].block_level == cells[i][j].block_level then
												return false
											end
										end
										if i < 5 then -- check right
											if cells[i+1][j].block_level == cells[i][j].block_level then
												return false
											end
										end
										if j > 1 then -- check down
											if cells[i][j-1].block_level == cells[i][j].block_level then
												return false
											end
										end
										if j < 7 then -- check up
											if cells[i][j+1].block_level == cells[i][j].block_level then
												return false
											end
										end
									end
								end
								return true
							end
							if check_over(self.cells) then
								timer.delay(1.2, false, function()
									msg.post(".", m_game.reset)
									msg.post(".", m_game.delete)
									msg.post("game#game", m_game.over)
								end)
								if m_game.score > m_game.best then
									sys.save(sys.get_save_file(m_game.save_file, "best"), {best = m_game.score})
								end
							else
								m_game.delay_input_focus(0.15)
								sys.save(sys.get_save_file(m_game.save_file, "cells"), {cells = self.cells})
								sys.save(sys.get_save_file(m_game.save_file, "level"), {level = self.level})
								sys.save(sys.get_save_file(m_game.save_file, "score"), {score = m_game.score})
								if m_game.score > m_game.best then
									m_game.best = m_game.score
									sys.save(sys.get_save_file(m_game.save_file, "best"), {best = m_game.score})
								end
							end
						end
					end)
					for i = 1, 5 do
						local empty = 0
						for j = 1, 7 do
							if self.cells[i][j].block_id == nil then
								empty = empty + 1
							elseif empty > 0 then
								go.animate(self.cells[i][j].block_id, "position.y", go.PLAYBACK_ONCE_FORWARD,
								cell_size * (j - 1 - empty) + border_y, go.EASING_LINEAR, m_game.dtn_fall)
								self.cells[i][j - empty].block_id = self.cells[i][j].block_id
								self.cells[i][j - empty].block_level = self.cells[i][j].block_level
								self.cells[i][j].block_id = nil
							end
						end
					end
				end)
			else
				link_remove(self)
				add_to_link(self, pos)
			end
		else
			local levels = {}
			for i = 1, 5 do
				levels[i] = {}
				for j = 1, 7 do
					if self.cells[i][j].block_level == curr.block_level then
						levels[i][j] = self.cells[i][j].block_id
					end
				end
			end
			local neighbors = {}
			local function check_cells(check_col, check_row)
				if levels[check_col][check_row] ~= nil then
					neighbors[#neighbors+1] = {}
					neighbors[#neighbors].col = check_col
					neighbors[#neighbors].row = check_row
					neighbors[#neighbors].block_id = levels[check_col][check_row]
					levels[check_col][check_row] = nil
				end
			end
			if col > 1 then -- check left
				check_cells(col-1, row)
			end
			if col < 5 then -- check right
				check_cells(col+1, row)
			end
			if row > 1 then -- check down
				check_cells(col, row-1)
			end
			if row < 7 then -- check up
				check_cells(col, row+1)
			end
			if #neighbors > 0 then
				while #neighbors > 0 do
					if neighbors[1].col > 1 then -- check left
						check_cells(neighbors[1].col-1, neighbors[1].row)
					end
					if neighbors[1].col < 5 then -- check right
						check_cells(neighbors[1].col+1, neighbors[1].row)
					end
					if neighbors[1].row > 1 then -- check down
						check_cells(neighbors[1].col, neighbors[1].row-1)
					end
					if neighbors[1].row < 7 then -- check up
						check_cells(neighbors[1].col, neighbors[1].row+1)
					end
					table.insert(self.link, neighbors[1])
					self.cells[neighbors[1].col][neighbors[1].row].linked = true
					msg.post(neighbors[1].block_id, m_game.link, {duration = m_game.dtn_create})
					table.remove(neighbors, 1)
				end
				msg.post("game#game", m_game.set_preview, {preview = 2 ^ curr.block_level * #self.link})
				sound.play("#sound-select", {gain = m_game.volume})
			end
		end
	elseif #self.link > 0 then
		link_remove(self)
		msg.post("game#game", m_game.set_preview, {preview = 0})
	end
end

function on_input(self, action_id, action)
	if action_id == m_game.touch then
		if action.pressed then
			add_to_link(self, m_game.screen_to_world(vmath.vector3(action.x, action.y, 0)))
		end
	end
end
