local m_game = require "bs.lua.game"

local function slider_change(background, fill, handle, position)
	local size = gui.get_size(background)
	size.x = position.x - 120
	gui.set_size(fill, size)
	size.x = 300 - size.x
	gui.set_size(background, size)
	gui.set_position(handle, position)
end

function init(self)
	self.box = gui.get_node("box")
	self.btn_back = gui.get_node("button-back")
	self.ctr_volume = gui.get_node("counter-volume")
	self.sdr_background = gui.get_node("slider-background")
	self.sdr_fill = gui.get_node("slider-fill")
	self.sdr_area = gui.get_node("slider-area")
	self.sdr_handle = gui.get_node("slider-handle")
	self.sdr_position = gui.get_position(self.sdr_handle)
	self.sdr_position.x = m_game.volume * 300 + 120
	self.clr_pressed = vmath.vector4(0.85, 0.85, 0.85, 1)
	self.clr_released = vmath.vector4(1)
	self.scl_rectangle = vmath.vector3(1.08, 1.08, 1)
	slider_change(self.sdr_background, self.sdr_fill, self.sdr_handle, self.sdr_position)
	gui.set_text(self.ctr_volume, math.floor(m_game.volume * 100) .. " %")
	msg.post(".", m_game.fade_in)
	m_game.delay_input_focus(m_game.dtn_create)
end

local function clamp(var, min, max)
	if var < min then return min
	elseif var > max then return max
	else return var end
end

local function slider_update(sdr_background, sdr_fill, sdr_handle, sdr_position, csr_position, diff_x, counter)
	sdr_position.x = clamp(csr_position.x - diff_x, 120, 420)
	slider_change(sdr_background, sdr_fill, sdr_handle, sdr_position)
	m_game.volume = (sdr_position.x - 120) / 300
	gui.set_text(counter, math.floor(m_game.volume * 100) .. " %")
	return sdr_position
end

function update(self, dt)
	if self.sdr_pressed ~= nil then
		if self.sdr_position.x - self.diff_x ~= self.csr_position.x then
			self.sdr_position = slider_update(self.sdr_background, self.sdr_fill,
			self.sdr_handle, self.sdr_position, self.csr_position, self.diff_x, self.ctr_volume)
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == m_game.fade_in then
		gui.set_alpha(self.box, 0)
		m_game.gui_animate_alpha(self.box, 1)
	elseif message_id == m_game.fade_out then
		m_game.gui_animate_alpha(self.box, 0)
	end
end

function on_input(self, action_id, action)
	if action_id == m_game.touch then
		if action.pressed then
			if gui.pick_node(self.btn_back, action.x, action.y) then
				m_game.gui_pressed(self.btn_back, m_game.scl_button)
				timer.delay(m_game.dtn_pressed, false, function()
					m_game.gui_switch("start")
				end)
			elseif gui.pick_node(self.sdr_handle, action.x, action.y) then
				gui.set_color(self.sdr_handle, self.clr_pressed)
				self.csr_position = m_game.screen_to_world(vmath.vector3(action.x, action.y, 0))
				self.diff_x = self.csr_position.x - self.sdr_position.x
				if self.sdr_position.x - self.diff_x ~= self.csr_position.x then
					self.sdr_position = slider_update(self.sdr_background, self.sdr_fill,
					self.sdr_handle, self.sdr_position, self.csr_position, self.diff_x, self.ctr_volume)
				end
				self.sdr_pressed = true
			elseif gui.pick_node(self.sdr_area, action.x, action.y) then
				gui.set_color(self.sdr_handle, self.clr_pressed)
				self.csr_position = m_game.screen_to_world(vmath.vector3(action.x, action.y, 0))
				self.diff_x = 0
				if self.sdr_position.x - self.diff_x ~= self.csr_position.x then
					self.sdr_position = slider_update(self.sdr_background, self.sdr_fill,
					self.sdr_handle, self.sdr_position, self.csr_position, self.diff_x, self.ctr_volume)
				end
				self.sdr_pressed = true
			end
		elseif action.released then
			gui.set_color(self.sdr_handle, self.clr_released)
			sys.save(sys.get_save_file(m_game.save_file, "volume"), {volume = m_game.volume})
			self.sdr_pressed = nil
		end
	elseif not action_id then
		self.csr_position = m_game.screen_to_world(vmath.vector3(action.x, action.y, 0))
	end
end
