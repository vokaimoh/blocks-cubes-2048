local m_game = require "bs.lua.game"

function init(self)
	self.box = gui.get_node("box")
	self.btn_back = gui.get_node("button-back")
	self.btn_restart = gui.get_node("button-restart")
	self.ctr_score = gui.get_node("counter-score")
	self.ctr_preview = gui.get_node("counter-preview")
	self.tgt_score = m_game.score
	self.tgt_preview = 0
	self.add_score = 0
	self.add_preview = 0
	self.last = m_game.best
	gui.set_enabled(self.ctr_preview, false)
	gui.set_text(self.ctr_score, m_game.score)
	msg.post(".", m_game.fade_in)
	m_game.delay_input_focus(m_game.dtn_create)
end

local function update_text(node, text, target, diff, dt, time, add)
	if add > 0 then
		add = add - (dt / (time / (math.abs(diff))))
		if diff > 0 then
			text = text .. math.floor(target - add)
		else
			text = text .. math.ceil(target + add)
		end
		gui.set_text(node, text)
		return add
	end
	gui.set_text(node, text .. target)
	return 0
end

function update(self, dt)
	if self.add_score ~= 0 then
		self.add_score = update_text(self.ctr_score, "", self.tgt_score,
		self.diff_score, dt, m_game.dtn_fall + m_game.dtn_create, self.add_score)
	end
	if self.add_preview ~= 0 then
		self.add_preview = update_text(self.ctr_preview, "+ ", self.tgt_preview,
		self.diff_preview, dt, m_game.dtn_create, self.add_preview)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == m_game.fade_in then
		gui.set_alpha(self.box, 0)
		m_game.gui_animate_alpha(self.box, 1)
	elseif message_id == m_game.fade_out then
		m_game.gui_animate_alpha(self.box, 0)
	elseif message_id == m_game.update_score then
		self.diff_score = m_game.score - self.tgt_score
		self.add_score = math.abs(self.diff_score)
		self.tgt_score = m_game.score
	elseif message_id == m_game.set_preview then
		self.diff_preview = message.preview - self.tgt_preview
		self.add_preview = math.abs(self.diff_preview)
		self.tgt_preview = message.preview
		gui.set_enabled(self.ctr_preview, self.tgt_preview > 0)
	elseif message_id == m_game.over then
		msg.post(".", "release_input_focus")
		m_game.gui_switch("over")
	end
end

function on_input(self, action_id, action)
	if action_id == m_game.touch and action.pressed then
		if gui.pick_node(self.btn_back, action.x, action.y) then
			m_game.gui_pressed(self.btn_back, m_game.scl_button)
			timer.delay(m_game.dtn_pressed, false, function()
				msg.post("grid#grid", m_game.delete)
				m_game.gui_switch("start")
			end)
		elseif gui.pick_node(self.btn_restart, action.x, action.y) then
			m_game.gui_pressed(self.btn_restart, m_game.scl_button)
			timer.delay(m_game.dtn_pressed, false, function()
				msg.post("grid#grid", m_game.reset)
				msg.post("grid#grid", m_game.delete)
				m_game.score = 0
				m_game.gui_switch("game")
			end)
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
