local m_game = require "bs.lua.game"
local window_resized = hash("window_resized")
--
-- projection that centers and fits content with maintained aspect ratio
--
local function fixed_fit_projection()
	local zoom = math.min(render.get_window_width() / render.get_width(), render.get_window_height() / render.get_height())
	local projected_width = render.get_window_width() / zoom
	local projected_height = render.get_window_height() / zoom
	local xoffset = -(projected_width - render.get_width()) / 2
	local yoffset = -(projected_height - render.get_height()) / 2
	return vmath.matrix4_orthographic(xoffset, xoffset + projected_width, yoffset, yoffset + projected_height, -1, 1)
end

function init(self)
	self.tile_pred = render.predicate({"tile"})
	self.gui_pred = render.predicate({"gui"})
	self.particle_pred = render.predicate({"particle"})
	self.background_pred = render.predicate({"background"})
	self.clr_clear = vmath.vector4()
	self.view = vmath.matrix4()

	m_game.proj = fixed_fit_projection()
end

function update(self)
	local window_width = render.get_window_width()
	local window_height = render.get_window_height()
	if window_width == 0 or window_height == 0 then
		return
	end
	-- clear screen buffers
	--
	render.set_depth_mask(true)
	render.set_stencil_mask(0xff)
	render.clear({[render.BUFFER_COLOR_BIT] = self.clr_clear, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
	-- render world (sprites, tilemaps, particles etc)
	--
	render.set_viewport(0, 0, window_width, window_height)
	render.set_view(self.view)

	render.set_projection(self.view)
	render.disable_state(render.STATE_BLEND)
	render.draw(self.background_pred)

	render.set_projection(fixed_fit_projection())
	render.set_depth_mask(false)
	render.disable_state(render.STATE_DEPTH_TEST)
	render.disable_state(render.STATE_STENCIL_TEST)
	render.enable_state(render.STATE_BLEND)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
	render.disable_state(render.STATE_CULL_FACE)
	render.draw(self.particle_pred)
	render.draw(self.tile_pred)
	-- render GUI
	--
	render.set_projection(vmath.matrix4_orthographic(0, window_width, 0, window_height, -1, 1))
	render.enable_state(render.STATE_STENCIL_TEST)
	render.draw(self.gui_pred)
	render.disable_state(render.STATE_STENCIL_TEST)
end

function on_message(self, message_id, message)
	if message_id == window_resized then
		m_game.proj = fixed_fit_projection()
	end
end
